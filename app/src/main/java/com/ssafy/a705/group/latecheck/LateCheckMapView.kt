package com.ssafy.a705.group.latecheck

import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.util.Log
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.toArgb
import com.kakao.vectormap.KakaoMap
import com.kakao.vectormap.LatLng
import com.kakao.vectormap.camera.CameraUpdateFactory
import com.kakao.vectormap.label.Label
import com.kakao.vectormap.label.LabelLayer
import com.kakao.vectormap.label.LabelOptions
import com.kakao.vectormap.label.LabelStyle
import com.kakao.vectormap.label.LabelStyles
import com.kakao.vectormap.label.LabelTextBuilder
import com.kakao.vectormap.label.LabelTextStyle
import com.ssafy.a705.R
import com.ssafy.a705.components.KakaoMapView
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

// CanvasÎ°ú ÏõêÌòï ÎßàÏª§ ÏÉùÏÑ±
fun createColoredMarker(color: Int): Bitmap {
    val size = 60
    val bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888)
    val canvas = Canvas(bitmap)
    val paint = Paint().apply {
        this.color = color
        isAntiAlias = true
    }
    canvas.drawCircle(size / 2f, size / 2f, size / 2.2f, paint)
    return bitmap
}

@Composable
fun LateCheckMapView(
    modifier: Modifier = Modifier,
    meetingPlace: MeetingPlace?,
    members: List<MemberStatus>
) {
    var kakaoMap by remember { mutableStateOf<KakaoMap?>(null) }
    var hasMovedCamera by remember { mutableStateOf(false) }
    val coroutineScope = rememberCoroutineScope()

    KakaoMapView(
        modifier = modifier,
        onMapReady = { map ->
            kakaoMap = map
            Log.d("LateCheckMapView", "ÏßÄÎèÑ Ï§ÄÎπÑ ÏôÑÎ£å")

            // ÎßàÏª§ ÌÅ¥Î¶≠ Ïãú ÎãâÎÑ§ÏûÑ ÌëúÏãú
            map.setOnLabelClickListener(object : KakaoMap.OnLabelClickListener {
                override fun onLabelClicked(
                    kakaoMap: KakaoMap,
                    layer: LabelLayer,
                    label: Label
                ): Boolean {
                    val nickname = label.tag as? String ?: return false
                    val latLng = label.position

                    // ÌÖçÏä§Ìä∏ Ïä§ÌÉÄÏùº (LabelTextBuilder)
                    val textBuilder = LabelTextBuilder()
                    textBuilder.setTexts(nickname)

                    val textStyle = LabelStyles.from(
                        LabelStyle.from(LabelTextStyle.from(28, Color.WHITE))
                    )

                    // ÌÖçÏä§Ìä∏ ÎùºÎ≤® ÏòµÏÖò
                    val textLabelOptions = LabelOptions.from(latLng)
                        .setStyles(textStyle)
                        .setTexts(textBuilder)
                        .setRank(999) // Ìï≠ÏÉÅ ÏúÑÏóê ÌëúÏãú

                    val textLabel = layer.addLabel(textLabelOptions)
                    // ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ•º ÎßàÏª§ ÏïàÏúºÎ°ú Ïù¥Îèô
                    textLabel.changePixelOffset(0f, -30f)

                    // 2Ï¥à ÌõÑ ÏûêÎèô Ï†úÍ±∞
                    coroutineScope.launch {
                        delay(2000)
                        layer.remove(textLabel)
                    }

                    return true
                }
            })
        }
    )

    // Î©§Î≤Ñ ÏúÑÏπòÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÎßàÏª§ ÏóÖÎç∞Ïù¥Ìä∏
    LaunchedEffect(kakaoMap, meetingPlace, members) {
        val map = kakaoMap ?: return@LaunchedEffect
        val place = meetingPlace

        Log.d("LateCheckMapView", "=== üó∫Ô∏è ÎßàÏª§ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë ===")
        Log.d("LateCheckMapView", "üó∫Ô∏è ÏßÄÎèÑ ÏÉÅÌÉú: ${if (map != null) "Ï§ÄÎπÑÎê®" else "Ï§ÄÎπÑ ÏïàÎê®"}")

        if (place != null) {
            Log.d("LateCheckMapView", "üèÅ Î™®ÏûÑÏû•ÏÜå: ${place.name} (${place.latitude}, ${place.longitude})")
        } else {
            Log.d("LateCheckMapView", "‚ö†Ô∏è Î™®ÏûÑÏû•ÏÜå: ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå")
        }
        Log.d("LateCheckMapView", "üë• Î©§Î≤Ñ Ïàò: ${members.size}")

        // Í∞Å Î©§Î≤ÑÏùò ÏúÑÏπò Ï†ïÎ≥¥ Î°úÍ∑∏
        members.forEachIndexed { index, member ->
            Log.d("LateCheckMapView", "üë§ Î©§Î≤Ñ${index + 1}: ${member.nickname}")
            Log.d("LateCheckMapView", "  üìß Ïù¥Î©îÏùº: ${member.email}")
            Log.d("LateCheckMapView", "  üìç ÏúÑÏπò: (${member.latitude}, ${member.longitude})")
            Log.d("LateCheckMapView", "  üí∞ ÏßÄÍ∞ÅÎπÑ: ${member.lateFee}Ïõê")
            Log.d("LateCheckMapView", "  üé® ÏÉâÏÉÅ: ${member.color}")
            Log.d("LateCheckMapView", "  ‚úÖ ÎßàÏª§ ÌëúÏãú Ïó¨Î∂Ä: ${member.latitude != 0.0 && member.longitude != 0.0}")
        }

        val labelManager = map.labelManager ?: return@LaunchedEffect
        val layer = labelManager.layer ?: return@LaunchedEffect

        // Í∏∞Ï°¥ ÎßàÏª§ Î™®Îëê Ï†úÍ±∞
        Log.d("LateCheckMapView", "üóëÔ∏è Í∏∞Ï°¥ ÎßàÏª§ Î™®Îëê Ï†úÍ±∞")
        layer.removeAll()

        // Î™®ÏûÑ Ïû•ÏÜåÍ∞Ä Ïú†Ìö®Ìïú Í≤ΩÏö∞ÏóêÎßå ÎßàÏª§ Ï∂îÍ∞Ä
        place?.let { p ->
            if (p.latitude != 0.0 && p.longitude != 0.0) {
                Log.d("LateCheckMapView", "üèÅ Î™®ÏûÑÏû•ÏÜå ÎßàÏª§ Ï∂îÍ∞Ä ÏãúÏûë")
                // Î™®ÏûÑ Ïû•ÏÜå Îπ®Í∞Ñ ÍπÉÎ∞ú
                val meetingStyles = labelManager.addLabelStyles(
                    LabelStyles.from(LabelStyle.from(R.drawable.flag_red))
                ) ?: return@LaunchedEffect
                val meetingLabel = LabelOptions.from(LatLng.from(p.latitude, p.longitude)).setStyles(meetingStyles)
                layer.addLabel(meetingLabel)
                Log.d("LateCheckMapView", "‚úÖ Î™®ÏûÑÏû•ÏÜå ÎùºÎ≤® Ï∂îÍ∞Ä ÏôÑÎ£å: ${p.name} (${p.latitude}, ${p.longitude})")

                // Ï¥àÍ∏∞ Ïπ¥Î©îÎùº Ïù¥Îèô(Î™®ÏûÑ Ïû•ÏÜå Ìè¨Ïª§Ïã±)
                if (!hasMovedCamera) {
                    Log.d("LateCheckMapView", "üì∑ Ïπ¥Î©îÎùº Ïù¥Îèô ÏãúÏûë")
                    map.moveCamera(CameraUpdateFactory.newCenterPosition(LatLng.from(p.latitude, p.longitude)))
                    map.moveCamera(CameraUpdateFactory.zoomTo(10))
                    hasMovedCamera = true
                    Log.d("LateCheckMapView", "‚úÖ Ïπ¥Î©îÎùº Ïù¥Îèô ÏôÑÎ£å")
                }
            } else {
                Log.d("LateCheckMapView", "‚ö†Ô∏è Î™®ÏûÑÏû•ÏÜå Ï¢åÌëúÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå: (${p.latitude}, ${p.longitude})")
            }
        } ?: run {
            Log.d("LateCheckMapView", "‚ö†Ô∏è Î™®ÏûÑÏû•ÏÜå Ï†ïÎ≥¥ ÏóÜÏùå")
        }

        // Î©§Î≤Ñ ÎßàÏª§ (ÏïÑÏù¥ÏΩò ÎùºÎ≤®)
        var addedMarkerCount = 0
        members.forEachIndexed { index, member ->
            // ÏúÑÏπòÍ∞Ä Ïú†Ìö®Ìïú Í≤ΩÏö∞ÏóêÎßå ÎßàÏª§ Ï∂îÍ∞Ä
            if (member.latitude != 0.0 && member.longitude != 0.0) {
                Log.d("LateCheckMapView", "=== üë§ Î©§Î≤Ñ ÎßàÏª§ Ï∂îÍ∞Ä ÏãúÏûë ===")
                Log.d("LateCheckMapView", "üë§ Î©§Î≤Ñ${index + 1}: ${member.nickname}")
                Log.d("LateCheckMapView", "üìß Ïù¥Î©îÏùº: ${member.email}")
                Log.d("LateCheckMapView", "üìç ÏúÑÏπò: (${member.latitude}, ${member.longitude})")
                Log.d("LateCheckMapView", "üí∞ ÏßÄÍ∞ÅÎπÑ: ${member.lateFee}Ïõê")
                Log.d("LateCheckMapView", "üé® ÏÉâÏÉÅ: ${member.color}")

                val bitmap = createColoredMarker(member.color.toArgb())
                val style = labelManager.addLabelStyles(
                    LabelStyles.from(LabelStyle.from(bitmap))
                ) ?: return@LaunchedEffect

                val iconLabel = LabelOptions.from(
                    LatLng.from(member.latitude, member.longitude)
                ).setStyles(style)
                    .setTag(member.nickname)
                    .setRank((index * 10).toLong()) // Í∏∞Î≥∏ Îû≠ÌÅ¨

                layer.addLabel(iconLabel)
                addedMarkerCount++
                Log.d("LateCheckMapView", "‚úÖ Î©§Î≤Ñ${index + 1} ÎßàÏª§ Ï∂îÍ∞Ä ÏôÑÎ£å: ${member.nickname}")
                Log.d("LateCheckMapView", "=== üë§ Î©§Î≤Ñ ÎßàÏª§ Ï∂îÍ∞Ä ÏôÑÎ£å ===")
            } else {
                Log.d("LateCheckMapView", "‚ö†Ô∏è Î©§Î≤Ñ ${member.nickname} ÏúÑÏπò Ï†ïÎ≥¥ ÏóÜÏùå - ÎßàÏª§ Ï∂îÍ∞Ä Í±¥ÎÑàÎúÄ")
            }
        }

        Log.d("LateCheckMapView", "=== üó∫Ô∏è ÎßàÏª§ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å ===")
        Log.d("LateCheckMapView", "üìä Ï¥ù Ï∂îÍ∞ÄÎêú ÎßàÏª§ Ïàò: ${addedMarkerCount}Í∞ú")
        Log.d("LateCheckMapView", "üìä Ï¥ù Î©§Î≤Ñ Ïàò: ${members.size}Î™Ö")
        Log.d("LateCheckMapView", "üìä ÎßàÏª§ Ï∂îÍ∞Ä ÏÑ±Í≥µÎ•†: ${if (members.size > 0) (addedMarkerCount * 100 / members.size) else 0}%")
    }
}
