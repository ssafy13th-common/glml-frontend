package com.ssafy.a705.group.list

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import com.ssafy.a705.global.components.HeaderRow
import com.ssafy.a705.group.common.component.CustomFlagTab
import com.ssafy.a705.group.common.component.EmptyGroupCard
import com.ssafy.a705.group.common.component.GroupCard
import com.ssafy.a705.group.common.model.Group
import com.ssafy.a705.global.navigation.GroupNavRoutes

@Composable
fun GroupListScreen(
    navController: NavController,
    viewModel: GroupListViewModel = hiltViewModel()
) {
    val state by viewModel.uiState.collectAsStateWithLifecycle()
    val lifecycleOwner = LocalLifecycleOwner.current

    // Ï¥àÍ∏∞ Î°úÎìú
    LaunchedEffect(Unit) {
        viewModel.loadGroups()
    }

    // ÌôîÎ©¥Ïù¥ Ìè¨Ïª§Ïä§Î•º Î∞õÏùÑ ÎïåÎßàÎã§ ÏÉàÎ°úÍ≥†Ïπ® (Ìé∏Ïßë ÌõÑ ÎèåÏïÑÏò¨ Îïå Îì±)
    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            if (event == Lifecycle.Event.ON_RESUME) {
                println("üîÑ ÌôîÎ©¥ Ìè¨Ïª§Ïä§ - Í∑∏Î£π Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®")
                viewModel.loadGroups()
            }
        }
        lifecycleOwner.lifecycle.addObserver(observer)
        onDispose {
            lifecycleOwner.lifecycle.removeObserver(observer)
        }
    }

    Scaffold(
        topBar = {
            HeaderRow(
                text = "Í∑∏Î£π",
                showText = true,
                showLeftButton = false,
                menuActions = emptyList()
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = { navController.navigate(GroupNavRoutes.Create) },
                containerColor = Color.White,
                contentColor = Color.Black
            ) {
                Icon(Icons.Default.Add, contentDescription = "Í∑∏Î£π ÏÉùÏÑ±")
            }
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            // Ïó¨ÌñâÏ§ëÏù∏ Í∑∏Î£πÏù¥ ÏóÜÏùÑ ÎïåÎßå Ï≤´ Î≤àÏß∏ Íµ¨Î∂ÑÏÑ† ÌëúÏãú
            if (state.ongoingGroup == null) {
                HorizontalDivider()
            }

            // ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Í∑∏Î£π
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(123.dp),
                contentAlignment = Alignment.Center
            ) {
                state.ongoingGroup?.let { g ->
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable {
                                if (g.id > 0) {
                                    navController.navigate(GroupNavRoutes.MemoWithId(g.id))
                                }
                            }
                    ) {
                        GroupCard(g)
                    }
                } ?: Text(
                    "Ïó¨ÌñâÏ§ëÏù∏ Í∑∏Î£πÏù¥ ÏóÜÏñ¥Ïöî",
                    color = Color.Gray
                )
            }

            // Ïó¨ÌñâÏ§ëÏù∏ Í∑∏Î£πÏù¥ ÏóÜÏùÑ ÎïåÎßå Îëê Î≤àÏß∏ Íµ¨Î∂ÑÏÑ† ÌëúÏãú
            if (state.ongoingGroup == null) {
                HorizontalDivider()
            }

            Spacer(modifier = Modifier.height(10.dp))

            // ÌÉ≠
            GroupTabRow(
                selectedTab = state.isPlanningSelected,
                onTabSelected = viewModel::toggleTab
            )

            // ÌÉ≠Î≥Ñ Í∑∏Î£π Î¶¨Ïä§Ìä∏
            if (state.isPlanningSelected) {
                PlanningGroupList(state.planningGroups) { groupId ->
                    println("‚ñ∂Ô∏è click planning id=$groupId")
                    if (groupId > 0) navController.navigate(GroupNavRoutes.MemoWithId(groupId))
                }
            } else {
                FinishedGroupList(state.finishedGroups) { groupId ->
                    if (groupId > 0) {
                        navController.navigate(GroupNavRoutes.MemoWithId(groupId))
                    }
                }
            }
        }
    }
}

// Í≥ÑÌöçÏ§ë Î¶¨Ïä§Ìä∏
@Composable
fun PlanningGroupList(
    groups: List<Group>,
    onGroupClick: (Long) -> Unit
) {
    if (groups.isEmpty()) {
        EmptyGroupCard()
    } else {
        LazyColumn(modifier = Modifier.fillMaxWidth()) {
            items(groups) { group ->
                println("üîç PlanningGroupList rendering: id=${group.id}, name=${group.name}")
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable {
                            println("üîç PlanningGroupList click: id=${group.id}")
                            onGroupClick(group.id)
                        }
                ) {
                    GroupCard(group)
                }
            }
        }
    }
}

// Ïó¨ÌñâÏôÑÎ£å Î¶¨Ïä§Ìä∏
@Composable
fun FinishedGroupList(
    groups: List<Group>,
    onGroupClick: (Long) -> Unit
) {
    if (groups.isEmpty()) {
        EmptyGroupCard()
    } else {
        LazyColumn(modifier = Modifier.fillMaxWidth()) {
            items(groups) { group ->
                println("üîç FinishedGroupList rendering: id=${group.id}, name=${group.name}")
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable {
                            println("üîç FinishedGroupList click: id=${group.id}")
                            onGroupClick(group.id)
                        }
                ) {
                    GroupCard(group)
                }
            }
        }
    }
}

// ÏÑúÎ•òÏ≤† Î™®Ïñë
@Composable
fun GroupTabRow(
    modifier: Modifier = Modifier,
    selectedTab: Boolean,
    onTabSelected: (Boolean) -> Unit
) {
    Row(
        modifier = modifier,
        verticalAlignment = Alignment.CenterVertically,
    ) {
        CustomFlagTab(
            text = "Ïó¨Ìñâ Ï†Ñ",
            selected = selectedTab,
            onClick = { onTabSelected(true) },
            backgroundColor = Color(0xFF8bd666)
        )

        CustomFlagTab(
            text = "Ïó¨Ìñâ ÏôÑÎ£å",
            selected = !selectedTab,
            onClick = { onTabSelected(false) },
            backgroundColor = Color(0xFF81b5f8)
        )
    }
}
